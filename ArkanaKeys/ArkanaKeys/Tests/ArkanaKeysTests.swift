// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xc6, 0x51, 0xfe, 0xa3, 0xf8, 0xe0, 0xf, 0xb0, 0xee, 0xa0, 0x6e, 0xe1, 0xa5, 0x73, 0x22, 0x19, 0x8d, 0xaf, 0x6e, 0xf5, 0xe3, 0x24, 0x7a, 0xc4, 0x1a, 0x49, 0x92, 0x1d, 0x24, 0x7f, 0xf1, 0xf, 0xe3, 0x43, 0xc5, 0xde, 0xbc, 0x17, 0xa8, 0xd4, 0x2, 0xed, 0xee, 0x7f, 0x9b, 0xe5, 0xba, 0xdf, 0xe1, 0xff, 0x34, 0x7b, 0x96, 0, 0x9a, 0x30, 0xa, 0x21, 0x44, 0xfa, 0xfd, 0xe6, 0xce, 0x26
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xa7, 0x69, 0x9f, 0x97, 0x99, 0x81, 0x6b, 0x82, 0xda, 0x96, 0xf, 0x83, 0x91, 0x11, 0x16, 0x7b, 0xb9, 0x9b, 0x5c, 0xc0, 0xd4, 0x10, 0x49, 0xf0, 0x7f, 0x2b, 0xaa, 0x2c, 0x11, 0x1d, 0x92, 0x69, 0xda, 0x71, 0xf5, 0xe6, 0x8c, 0x25, 0x9d, 0xe1, 0x3a, 0xd9, 0xd9, 0x4d, 0xaf, 0xdc, 0x8e, 0xbe, 0xd3, 0xcb, 0x52, 0x4b, 0xf2, 0x31, 0xff, 0x5, 0x3b, 0x15, 0x21, 0x9e, 0x9e, 0x83, 0xf7, 0x15, 0xf1, 0x68, 0x9b, 0xc0, 0xcd, 0x81, 0x3f, 0x87, 0xdc, 0xc6, 0x58, 0xd0, 0xc6, 0x10, 0x12, 0x29, 0xb9, 0xcc, 0xc, 0xc7, 0x87, 0x46, 0x4a, 0xa1, 0x2e, 0x2f, 0xab, 0x28, 0x10, 0x1b, 0x90, 0x3c, 0xd5, 0x74, 0xa7, 0xbc, 0x89, 0x71, 0xcb, 0xe1, 0x63, 0x8e, 0xdf, 0x19, 0xa3, 0xd1, 0x8c, 0xe6, 0xd2, 0x99, 0x50, 0x48, 0xa1, 0x30, 0xa2, 0x6, 0x3e, 0x11, 0x27, 0xce, 0xca, 0xd3, 0xf9, 0x13
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "a8a4aad246ab4b4b44257434eb815bcf920802558472494a24f0d1e514edce9379ec5a072f61cc004cb2db0e4f954da367bb5fc5ac1f84693fd3708640c47575")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x92, 0x9, 0xa4, 0xcd, 0x94, 0xad, 0x43, 0x83, 0xb4, 0x98, 0x56, 0xad, 0xef, 0x11, 0x4e, 0x7c, 0xbd, 0x9d, 0x3e, 0xa0, 0xae, 0x14, 0xe, 0x80, 0x4f, 0x10, 0xd5, 0x6d, 0x57, 0x19, 0xc7, 0x4e, 0xa2, 0xc, 0x9c, 0xe6, 0xca, 0x55, 0xd8, 0xbb, 0x4e, 0x8b, 0xd9, 0x4e, 0xdc, 0xbc, 0x8d, 0xb6, 0xb3, 0xa9, 0x7, 0x4f, 0xde, 0x79, 0xce, 0x58, 0x65, 0xe, 0x15, 0xa3, 0xba, 0xa7, 0xad, 0xd, 0x89, 0x35, 0xb9, 0xca, 0xbc, 0x92, 0x5f, 0xc1, 0xdc, 0x8b, 0x14, 0xb0, 0xf4, 0x47, 0x48, 0x28, 0xe2, 0xd9, 0x1f, 0x9c, 0x86, 0x75, 0x47, 0xf9
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "TXZnlML3Z88LJble02PUM0tDUYGpsf6AAOY8vBpoLf71GY7iRV34HyTho/QYGAc+OdGiDrPq2+zQQ4j1ovqieQ==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xfe, 0x64, 0x98, 0x96, 0x9c, 0xd1, 0x6d, 0x83, 0xc3, 0xc1, 0xb, 0xd0, 0x94, 0x5e, 0x16, 0x7c, 0xb8, 0xc9, 0x43, 0x94, 0x86, 0x41, 0x48, 0xe9, 0x2c, 0x71, 0xa2, 0x2b, 0x11, 0x1d, 0x94, 0x38, 0x87, 0x76, 0xf5, 0xe9
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "85f5d1b3-ae11-4e5f-aee2-68065be7d507")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb2, 0x23, 0x8b, 0xc6
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xa0, 0x30, 0x92, 0xd0, 0x9d
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xf2, 0x63
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xf6, 0x61, 0xce, 0x92
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xff, 0x63, 0xcc, 0x90, 0xcb, 0xd7, 0x3d, 0x80, 0xdd, 0x96, 0x56, 0xd4, 0x91, 0x44, 0x15, 0x2c, 0xb5, 0x9f, 0x59, 0xcc, 0xd1, 0x16, 0x49, 0xf7, 0x2d, 0x7b, 0xa2, 0x2e, 0x12, 0x47, 0xc4, 0x3b, 0xd4, 0x74, 0xf0, 0xe6, 0x8c, 0x20
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xeb, 0x65, 0xcc
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xf5, 0x7f, 0xcf, 0x97
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xb4, 0x34, 0x9f, 0xcf, 0xa7, 0xc4, 0x63, 0xd9, 0x83, 0xff, 0x1d, 0x89, 0xc4, 0x17, 0x5b
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
