// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xc6, 0x51, 0xfe, 0xa3, 0xf8, 0xe0, 0xf, 0xb0, 0xee, 0xa0, 0x6e, 0xe1, 0xa5, 0x73, 0x22, 0x19, 0x8d, 0xaf, 0x6e, 0xf5, 0xe3, 0x24, 0x7a, 0xc4, 0x1a, 0x49, 0x92, 0x1d, 0x24, 0x7f, 0xf1, 0xf, 0xe3, 0x43, 0xc5, 0xde, 0xbc, 0x17, 0xa8, 0xd4, 0x2, 0xed, 0xee, 0x7f, 0x9b, 0xe5, 0xba, 0xdf, 0xe1, 0xff, 0x34, 0x7b, 0x96, 0, 0x9a, 0x30, 0xa, 0x21, 0x44, 0xfa, 0xfd, 0xe6, 0xce, 0x26
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let marvelPublicKey: String = {
            let encoded: [UInt8] = [
                0xa4, 0x34, 0x9d, 0xc5, 0x99, 0x86, 0x38, 0x81, 0x8b, 0xc4, 0x57, 0xd2, 0x94, 0x44, 0x10, 0x2c, 0xb9, 0x9c, 0xb, 0xc4, 0xd5, 0x14, 0x18, 0xa1, 0x7e, 0x7b, 0xa4, 0x2e, 0x13, 0x48, 0xc2, 0x3b
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelPrivateKey: String = {
            let encoded: [UInt8] = [
                0xa0, 0x60, 0x9f, 0x90, 0x9e, 0x84, 0x3a, 0x85, 0x8f, 0xc2, 0x5c, 0x85, 0x94, 0x40, 0x16, 0x2c, 0xeb, 0x99, 0x5e, 0xc0, 0xd5, 0x16, 0x1c, 0xa7, 0x7f, 0x28, 0xf6, 0x2b, 0x13, 0x4e, 0xc2, 0x36, 0x86, 0x27, 0xa4, 0xe6, 0xdd, 0x27, 0x90, 0xb7
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}

public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
